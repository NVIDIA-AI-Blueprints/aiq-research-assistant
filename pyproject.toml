[build-system]
build-backend = "setuptools.build_meta"
requires = ["setuptools >= 64", "setuptools-scm>=8"]

[tool.setuptools]
package-dir = {"" = "aira/src"}

[tool.setuptools_scm]
root = "."

[project]
name = "aiq_aira"
dynamic = ["version"]
dependencies = [
  "nvidia-nat[langchain,opentelemetry,weave]~=1.2",
  "aiohappyeyeballs==2.4.4",
  "aiohttp",
  "aiosignal==1.3.2",
  "annotated-types==0.7.0",
  "anyio==4.8.0",
  "appdirs~=1.4.4",
  "async-timeout==5.0.1",
  "attrs==25.1.0",
  "certifi==2025.1.31",
  "charset-normalizer==3.4.1",
  "click~=8.2.1",
  "colorama",
  "distro==1.9.0",
  "dotenv~=0.9.9",
  "exceptiongroup==1.2.2",
  "frozenlist==1.5.0",
  "gql<4",  # keep GraphQL client version compatible
  "h11>=0.16.0",
  "httpcore",
  "httpx",
  "idna==3.10",
  "jiter==0.8.2",
  "joblib>=1.5.0",
  "jsonpatch==1.33",
  "jsonpointer==3.0.0",
  "langchain-core",
  "langchain-nvidia-ai-endpoints",
  "langchain-openai",
  "langgraph-checkpoint==2.0.10",
  "langgraph-sdk==0.1.51",
  "langgraph==0.2.69",
  "langsmith==0.3.4",
  "litellm~=1.74.3",
  "msgpack==1.1.0",
  "multidict==6.1.0",
  "openai~=1.68.2",
  "openinference-instrumentation-langchain",
  "openinference-instrumentation-openai",
  "orjson==3.10.15",
  "packaging==24.2",
  "propcache==0.2.1",
  "pyarrow>=15.0.0",
  "pydantic_core",
  "pydantic",
  "pyjwt==2.10.1",
  "PyYAML==6.0.2",
  "ragas>=0.1.0",
  "redis==5.2.1",
  "regex==2024.11.6",
  "requests-toolbelt==1.0.0",
  "requests==2.32.3",
  "sniffio==1.3.1",
  "tenacity==9.0.0",
  "tiktoken==0.8.0",
  "tqdm==4.67.1",
  "typing_extensions==4.12.2",
  "urllib3==2.3.0",
  "wandb<0.21.0",  # pin for compatibility with weave 0.51.x (uses gql 3.x)
  "weave==0.51.55",
  "xmltodict==0.14.2",
  "yarl==1.18.3",
  "zstandard==0.23.0",
]
requires-python = ">=3.12"
description = "AIRA AI-Q example"
keywords = ["ai", "rag", "agents"]
classifiers = ["Programming Language :: Python"]

[project.optional-dependencies]
dev = [
  "aiohttp>=3.11.14",
  "docker>=7.1.0",
  "isort==5.12.0",
  "pre-commit>=4.0,<5.0",
  "pytest-aiohttp>=1.1.0",
  "pytest-asyncio>=0.25.3",
  "pytest-dotenv>=0.5.2",
  "pytest>=8.3.5",
  "yapf==0.43.*",
]
weave = [
  "wandb<0.21.0",
  "gql<4"
]

[tool.uv]
managed = true

[project.entry-points.'nat.plugins']
aiq_aira = "aiq_aira.register"

[project.scripts]
aira = "aiq_aira.cli:run_cli"

# ===== flake8 Config =====
[tool.flake8]
filename = ["*.py"]

max-line-length = 120
max-doc-length = 120

extend-ignore = [
  # Ignore missing docstrings __init__ methods as we document those on the class
  "D107",
  # Don't require quotes to be placed on the same line as a one-line docstring, useful when the docstring is close
  # to the line limit
  "D200",
  # Allow a blank line between a docstring and the code
  "D202",
  # D204: 1 blank line required after class docstring
  "D204",
  # D205: 1 blank line required between summary line and description (allow for a paragraph)
  "D205",
  # D400: First line should end with a period (only works if we're adhering to D205)
  "D400",
  # D401: First line should be in imperative mood
  "D401",
]

# ===== isort Config =====
[tool.isort]
line_length = 120
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
combine_as_imports = true
order_by_type = true
force_single_line = true
default_section = "THIRDPARTY"
src_paths = ["aira/src", "aira/test_aira", "data"]
skip = [
  "__init__.py",
  ".eggs",
  ".git",
  ".hg",
  ".mypy_cache",
  ".tmp",
  ".tox",
  ".venv",
  "buck-out",
  "build",
  "dist",
  "models",
  "thirdparty",
]
known_first_party = ["aiq_aira"]


# ===== yapf Config =====
[tool.yapf]
based_on_style = "pep8"
column_limit = 120
split_all_top_level_comma_separated_values = true
join_multiple_lines = true
indent_dictionary_value = true

[tool.pytest.ini_options]
env_files = [".env", "test.env"]
